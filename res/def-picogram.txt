token TOKEN token
token REGEX regex
token ESCAPED escaped
token OPERATOR operator
regex INTEGER [0-9]+
token LEFT left
token RIGHT right
token NONASSOC nonassoc
token ARROW ->
token CURLY_OPEN {
token CURLY_CLOSE }
escaped token SPACE \s
escaped token EOL \n
regex ROL [^\n]*
regex NAME [a-zA-Z_][a-zA-Z_0-9]*

Start -> Items { reduceGrammar }
Items -> Items EOL Item { reduceItems }
Items -> Items EOL { reduceItems }
Items -> Item { reduceArrayOf }

Item -> TokenDef { reduceIdentity }
Item -> OperatorDef { reduceIdentity }
Item -> RuleDef { reduceIdentity }

TokenDef -> TokenType SPACE NAME SPACE ROL { reduceTokenDef }
TokenType -> TOKEN { reduceIdentity }
TokenType -> ESCAPED SPACE TOKEN { reduceEscapedTokenType }
TokenType -> REGEX { reduceIdentity }

OperatorDef -> OPERATOR SPACE NAME SPACE INTEGER { reduceOperatorDef }
OperatorDef -> OPERATOR SPACE NAME SPACE INTEGER SPACE AssocDef { reduceOperatorDef }
AssocDef -> LEFT { reduceIdentity }
AssocDef -> RIGHT { reduceIdentity }
AssocDef -> NONASSOC { reduceIdentity }

RuleDef -> NAME SPACE ARROW SPACE Sequence SPACE CURLY_OPEN SPACE NAME SPACE CURLY_CLOSE { reduceRuleDef }
Sequence -> Sequence SPACE NAME { reduceSequenceItems }
Sequence -> NAME { reduceIdentity }
